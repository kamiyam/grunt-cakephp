{
  "name": "grunt-connect-proxy",
  "description": "Provides an http proxy as middleware for grunt connect.",
  "version": "0.1.4",
  "homepage": "https://github.com/drewzboto/grunt-connect-proxy",
  "author": {
    "name": "Drewz",
    "email": "drewz@2mod5.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/drewzboto/grunt-connect-proxy.git"
  },
  "bugs": {
    "url": "https://github.com/drewzboto/grunt-connect-proxy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/drewzboto/grunt-connect-proxy/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "http-proxy": "~0.10.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "proxy",
    "connect",
    "http",
    "grunt"
  ],
  "readme": "# grunt-connect-proxy\n\n> Provides an http proxy as middleware for the grunt-contrib-connect plugin. \n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-connect-proxy --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-connect-proxy');\n```\n\n## Adapting the  \"connect\" task\n\n### Overview\n\n#### Proxy Configuration\nIn your project's Gruntfile, add a section named `proxies` to your existing connect definition.\n\n```js\ngrunt.initConfig({\n    connect: {\n            options: {\n                port: 9000,\n                hostname: 'localhost'\n            },\n            proxies: [\n                {\n                    context: '/cortex',\n                    host: '10.10.2.202',\n                    port: 8080,\n                    https: false,\n                    changeOrigin: false\n                }\n            ]\n        }\n})\n```\n####\nAdding the middleware\nExpose the proxy function to use in the middleware, at the top of the grunt file:\n```js\nvar proxySnippet = require('grunt-connect-proxy/lib/utils').proxyRequest;\n```\n\nAdd the middleware call from the connect option middleware hook\n```js\n        connect: {\n            livereload: {\n                options: {\n                    middleware: function (connect) {\n                        return [\n                            proxySnippet\n                        ];\n                    }\n                }\n            }\n        }\n```\n### Adding the configureProxy task to the server task\nFor the server task, add the configureProxies task before the connect task\n```js\n    grunt.registerTask('server', function (target) {\n        grunt.task.run([\n            'clean:server',\n            'compass:server',\n            'configureProxies',\n            'livereload-start',\n            'connect:livereload',\n            'open',\n            'watch'\n        ]);\n    });\n```\n\n\n### Options\nThe available configuration options from a given proxy are generally the same as what is provided by the underlying [httpproxy](https://github.com/nodejitsu/node-http-proxy) library\n\n#### options.context\nType: `String`\n\nThe context to match requests against. Matching requests will be proxied. Should start with /. Should not end with /\n\n#### options.host\nType: `String`\n\nThe host to proxy to. Should not start with the http/https protocol.\n\n#### options.port\nType: `Number`\nDefault: 80\n\nThe port to proxy to. \n\n#### options.https\nType: `Boolean`\nDefault: false\n\nWhether to proxy with https\n\n#### options.changeOrigin\nType: `Boolean`\nDefault: false\n\nWhether to change the origin on the request to the proxy, or keep the original origin.\n\n#### options.appendProxies\nType: `Boolean`\nDefault: true\n\nSet to false to isolate multi-task configuration proxy options from parent level instead of appending them.\n\n#### options.rewrite\nType: `Object`\n\nAllows rewrites of url (including context) when proxying. The object's keys serve as the regex used in the replacement operation. As an example the following proxy configuration will remove the context when proxying:\n\n```js\nproxies: [\n    context: '/context',\n    host: 'host',\n    port: 8080,\n    rewrite: {\n        '^/removingcontext': '',\n        '^/changingcontext': '/anothercontext'\n    }\n]\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n#### Multi-server proxy configuration\n\ngrunt-contrib-connect multi-server configuration is supported. You can define _proxies_ blocks in per-server options and refer to those blocks in task invocation.\n\n```js\ngrunt.initConfig({\n    connect: {\n            options: {\n                port: 9000,\n                hostname: 'localhost'\n            },\n            server2: {\n                proxies: [\n                    {\n                        context: '/cortex',\n                        host: '10.10.2.202',\n                        port: 8080,\n                        https: false,\n                        changeOrigin: false\n                    }\n                ]\n            },\n            server3: {\n                appendProxies: false,\n                proxies: [\n                    {\n                        context: '/api',\n                        host: 'example.org'\n                    }\n                ]\n            }\n        }\n})\n\ngrunt.registerTask('e2etest', function (target) {\n    grunt.task.run([\n        'configureProxies:server2',\n        'open',\n        'karma'\n    ]);\n});\n```\n\n\n## Release History\n* 0.1.0 Initial release\n* 0.1.1 Fix changeOrigin\n* 0.1.2 Support multiple server definitions, bumped to grunt 0.4.1 (thanks to @lauripiispanen)\n* 0.1.3 Bumped http-proxy dependency to 0.10.2\n* 0.1.4 Added proxy rewrite support (thanks to @slawrence)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-connect-proxy@0.1.4",
  "_from": "grunt-connect-proxy@~0.1.4"
}
